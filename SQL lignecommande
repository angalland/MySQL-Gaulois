-- Lire la base de donnée
SELECT nom_personnage   -- selectionne le champ nom_personnage
FROM personnage;         -- dans le tableau personnage

-- 1 Nom des lieux qui finissent par 'um'.
SELECT nom_lieu
FROM lieu
WHERE nom_lieu 
LIKE "%um";

-- 2 Nombre de personnages par lieu (trié par nombre de personnages décroissant).
SELECT nom_lieu, COUNT(id_personnage) AS nombre_personnage
FROM lieu
INNER JOIN personnage
	ON lieu.id_lieu = personnage.id_lieu
GROUP BY nom_lieu;
ORDER BY nombre_personnage DESC;

-- 3 Nom des personnages + spécialité + adresse et lieu d'habitation, triés par lieu puis par nom de personnage.
SELECT DISTINCT nom_lieu, nom_personnage, nom_specialite, adresse_personnage 
FROM lieu
INNER JOIN personnage
	ON lieu.id_lieu = personnage.id_lieu
INNER JOIN specialite
	ON specialite.id_specialite = personnage.id_specialite
ORDER BY nom_lieu, nom_personnage;

-- 4 Nom des spécialités avec nombre de personnages par spécialité (trié par nombre de personnages décroissant).
SELECT nom_specialite, COUNT(id_personnage)
FROM specialite
INNER JOIN personnage
    ON specialite.id_specialite = personnage.id_specialite
GROUP BY nom_specialite
ORDER BY COUNT(id_personnage) DESC;

-- 5 Nom, date et lieu des batailles, classées de la plus récente à la plus ancienne (dates affichées au format jj/mm/aaaa)
SELECT DATE_FORMAT(date_bataille, "%d/%m/%Y") AS 'Date bataille', nom_bataille, nom_lieu
FROM bataille
INNER JOIN lieu
 	ON bataille.id_lieu = lieu.id_lieu
ORDER BY date_bataille DESC;

-- 6 Nom des potions + coût de réalisation de la potion (trié par coût décroissant).
SELECT nom_potion , SUM(cout_ingredient*qte) AS cout
FROM composer
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
INNER JOIN potion 
	ON composer.id_potion = potion.id_potion
GROUP BY potion.nom_potion
ORDER BY cout DESC;

-- 7 Nom des ingrédients + coût + quantité de chaque ingrédient qui composent la potion 'Santé'.
SELECT  nom_potion,nom_ingredient, SUM(cout_ingredient*qte) AS cout_potion, qte
FROM composer
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
INNER JOIN potion
	ON composer.id_potion = potion.id_potion
WHERE composer.id_potion = 3
GROUP BY nom_ingredient, qte;

-- 8 Nom du ou des personnages qui ont pris le plus de casques dans la bataille 'Bataille du village gaulois'
SELECT MAX(nom_personnage)
FROM prendre_casque
INNER JOIN personnage
	ON prendre_casque.id_personnage = personnage.id_personnage
INNER JOIN bataille
	ON prendre_casque.id_bataille = bataille.id_bataille
WHERE prendre_casque.id_bataille = (bataille.nom_bataille = 'Bataille du village gaulois');

-- 9 Nom des personnages et leur quantité de potion bue (en les classant du plus grand buveur au plus petit).
SELECT nom_personnage, SUM(dose_boire) AS quantite_bu
FROM boire
INNER JOIN personnage
	ON boire.id_personnage = personnage.id_personnage
GROUP BY personnage.id_personnage
ORDER BY quantite_bu DESC;

-- 10 Nom de la bataille où le nombre de casques pris a été le plus important.
SELECT nom_bataille, SUM(qte) AS qte
FROM prendre_casque
INNER JOIN bataille
	ON prendre_casque.id_bataille = bataille.id_bataille
GROUP BY nom_bataille
ORDER BY qte DESC 
LIMIT 1;

SELECT bataille.nom_bataille, SUM(prendre_casque.qte) AS nb_casques
FROM bataille, prendre_casque 
WHERE bataille.id_bataille = prendre_casque.id_bataille 
GROUP BY bataille.id_bataille 
HAVING nb_casques >= ALL (
 	SELECT SUM(prendre_casque.qte) 
	FROM bataille, prendre_casque 
	WHERE bataille.id_bataille= prendre_casque.id_bataille GROUP BY bataille.id_bataille );

-- 11 Combien existe-t-il de casques de chaque type et quel est leur coût total ? (classés par nombre décroissant)
SELECT type_casque.nom_type_casque, COUNT(casque.id_type_casque), SUM(casque.cout_casque) AS cout
FROM type_casque
INNER JOIN casque
	ON type_casque.id_type_casque = casque.id_type_casque
GROUP BY type_casque.nom_type_casque
ORDER BY cout DESC;

-- 12 Nom des potions dont un des ingrédients est le poisson frais.
SELECT potion.nom_potion
FROM composer
INNER JOIN Potion
	ON composer.id_potion = potion.id_potion
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
WHERE composer.id_ingredient = 24;

SELECT potion.nom_potion
FROM composer
INNER JOIN potion
 	ON composer.id_potion = potion.id_potion
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
WHERE nom_ingredient 
LIKE '%oisson frais';

--  13 Nom du / des lieu(x) possédant le plus d'habitants, en dehors du village gaulois.
SELECT COUNT(nom_lieu) AS nombre_personnage, nom_lieu
FROM personnage, lieu
WHERE personnage.id_lieu = lieu.id_lieu
AND nom_lieu != 'Village gaulois'
GROUP BY nom_lieu
HAVING nombre_personnage >= ALL(
 	SELECT COUNT(personnage.id_lieu)
	FROM personnage, lieu
	WHERE personnage.id_lieu = lieu.id_lieu
	AND nom_lieu != 'Village gaulois'
	GROUP BY personnage.id_lieu );


-- 14 Nom des personnages qui n''ont jamais bu aucune potion
SELECT nom_personnage
FROM personnage
LEFT JOIN boire 
	ON personnage.id_personnage = boire.id_personnage
WHERE boire.id_personnage IS NULL
ORDER BY nom_personnage;

-- 15 Nom du / des personnages qui n'ont pas le droit de boire de la potion 'Magique'.
SELECT nom_personnage
FROM personnage
LEFT JOIN autoriser_boire
	ON autoriser_boire.id_personnage = personnage.id_personnage
LEFT JOIN potion
	ON autoriser_boire.id_potion = potion.id_potion
WHERE nom_potion IS NOT NULL
AND autoriser_boire.id_personnage NOT IN (
			SELECT autoriser_boire.id_personnage
			FROM personnage
			LEFT JOIN autoriser_boire
			ON autoriser_boire.id_personnage = personnage.id_personnage
			LEFT JOIN potion
			ON autoriser_boire.id_potion = potion.id_potion
			WHERE potion.id_potion = (potion.nom_potion = 'Magique')
			)
GROUP BY nom_personnage
ORDER BY nom_personnage;

--  A Ajoutez le personnage suivant : Champdeblix, agriculteur résidant à la ferme Hantassion de  Rotomagus.
INSERT INTO personnage (nom_personnage, adresse_personnage, id_lieu, id_specialite)
VALUES ('Champdeblix', 'Ferme Hantassion', 
(SELECT id_lieu FROM lieu WHERE nom_lieu = 'Rotomagus'),
(SELECT id_specialite FROM specialite WHERE nom_specialite =
'Agriculteur'))

-- test ---
INSERT INTO personnage (`id_personnage`, `nom_personnage`, `adresse_personnage`, `image_personnage`, `id_lieu`, `id_specialite`)
VALUES
			(46, 'Textix', 'SDF', 'indisponible.jpg', 1, 11);

INSERT INTO personnage (nom_personnage, adresse_personnage, id_lieu, id_specialite)
 VALUES 
		 ( 'Textix3', 'ferme Hantassion', 6, 12);


--  B Autorisez Bonemine à boire de la potion magique, elle est jalouse d'Iélosubmarine...
INSERT INTO autoriser_boire 
VALUES (
	(SELECT id_potion FROM potion WHERE nom_potion = 'Magique'),
	(SELECT id_personnage FROM personnage WHERE nom_personnage = 'Bonemine')); 

-- . C Supprimez les casques grecs qui n'ont jamais été pris lors d'une bataille.
SELECT id_casque
FROM casque
INNER JOIN type_casque
	ON casque.id_type_casque = type_casque.id_type_casque
WHERE type_casque.nom_type_casque = 'Grec'
AND casque.id_casque  not IN (
	SELECT prendre_casque.id_casque
	FROM prendre_casque
	INNER JOIN casque
		ON prendre_casque.id_casque = casque.id_casque);

SELECT id_casque
    FROM prendre_casque
    WHERE id_bataille IS NOT NULL;
		

 SELECT id_type_casque
    FROM type_casque
    WHERE LOWER(nom_type_casque) = 'grec';

DELETE FROM casque
	WHERE id_type_casque = (
	SELECT id_type_casque
   FROM type_casque
   WHERE LOWER(nom_type_casque) = 'grec')
AND id_casque NOT IN  (
	SELECT id_casque
   FROM prendre_casque
  	WHERE id_bataille IS NOT NULL);

DELETE FROM casque
WHERE id_casque IN (21, 22, 23);

-- D Modifiez l'adresse de Zérozérosix : il a été mis en prison à Condate.
UPDATE personnage
SET 	adresse_personnage = 'prison', 
		id_lieu = (SELECT id_lieu FROM lieu WHERE nom_lieu = 'Condate')
WHERE nom_personnage = 'Zérozérosix';

-- E La potion 'Soupe' ne doit plus contenir de persil.
DELETE FROM composer
WHERE id_potion = (
	SELECT id_potion
	FROM potion
	WHERE nom_potion = 'Soupe')
AND id_ingredient = (
	SELECT id_ingredient
	FROM ingredient
	WHERE nom_ingredient = 'Persil');

-- Obélix s'est trompé : ce sont 42 casques Weisenau, et non Ostrogoths, qu'il a pris lors de la bataille 'Attaque de la banque postale'. Corrigez son erreur !

UPDATE prendre_casque
SET id_casque = (
	SELECT id_casque
	FROM casque
	WHERE nom_casque = 'Weisenau'),
 	qte = 42 
WHERE id_bataille = (
	SELECT id_bataille
	FROM bataille
	WHERE nom_bataille = 'Attaque de la banque postale')
AND id_personnage = (
	SELECT id_personnage
	FROM personnage
	WHERE nom_personnage = 'Obélix');

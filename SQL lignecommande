-- Lire la base de donnée
SELECT nom_personnage   -- selectionne le champ nom_personnage
FROM personnage;         -- dans le tableau personnage

-- lire des données qui finissent par um
SELECT nom_lieu
FROM lieu
WHERE nom_lieu 
LIKE "%um";

-- Lire des données situés dans plusieurs tableau tout en utilisant la fonction count et en supprimant les doublons
SELECT nom_lieu, COUNT(id_personnage)
FROM lieu
INNER JOIN personnage
	ON lieu.id_lieu = personnage.id_lieu
GROUP BY nom_lieu;

-- . Nom des personnages + spécialité + adresse et lieu d'habitation, triés par lieu puis par nom de personnage.
SELECT DISTINCT nom_lieu, nom_personnage, nom_specialite, adresse_personnage 
FROM lieu
INNER JOIN personnage
	ON lieu.id_lieu = personnage.id_lieu
INNER JOIN specialite
	ON specialite.id_specialite = personnage.id_specialite
ORDER BY nom_lieu, nom_personnage;

--  Nom des spécialités avec nombre de personnages par spécialité (trié par nombre de personnages décroissant).
SELECT nom_specialite, COUNT(id_personnage)
FROM specialite
INNER JOIN personnage
    ON specialite.id_specialite = personnage.id_specialite
GROUP BY nom_specialite
ORDER BY COUNT(id_personnage) DESC;

-- Nom, date et lieu des batailles, classées de la plus récente à la plus ancienne (dates affichées au format jj/mm/aaaa)
SELECT DATE_FORMAT(date_bataille, "%d/%m/%Y") AS 'Date bataille', nom_bataille, nom_lieu
FROM bataille
INNER JOIN lieu
 	ON bataille.id_lieu = lieu.id_lieu
ORDER BY date_bataille DESC;

-- Nom des potions + coût de réalisation de la potion (trié par coût décroissant).
SELECT nom_potion , SUM(cout_ingredient*qte) AS cout
FROM composer
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
INNER JOIN potion 
	ON composer.id_potion = potion.id_potion
GROUP BY potion.nom_potion
ORDER BY cout DESC;

-- Nom des ingrédients + coût + quantité de chaque ingrédient qui composent la potion 'Santé'.
SELECT  nom_potion,nom_ingredient, SUM(cout_ingredient*qte) AS cout_potion, qte
FROM composer
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
INNER JOIN potion
	ON composer.id_potion = potion.id_potion
WHERE composer.id_potion = 3
GROUP BY nom_ingredient, qte;

-- . Nom du ou des personnages qui ont pris le plus de casques dans la bataille 'Bataille du village gaulois'
SELECT MAX(nom_personnage)
FROM prendre_casque
INNER JOIN personnage
	ON prendre_casque.id_personnage = personnage.id_personnage
INNER JOIN bataille
	ON prendre_casque.id_bataille = bataille.id_bataille
WHERE prendre_casque.id_bataille = (bataille.nom_bataille = 'Bataille du village gaulois');

-- . Nom des personnages et leur quantité de potion bue (en les classant du plus grand buveur au plus petit).
SELECT nom_personnage, dose_boire
FROM boire
INNER JOIN personnage
	ON boire.id_personnage = personnage.id_personnage
ORDER BY dose_boire DESC;

-- Nom de la bataille où le nombre de casques pris a été le plus important.
SELECT nom_bataille, SUM(qte) AS qte
FROM prendre_casque
INNER JOIN bataille
	ON prendre_casque.id_bataille = bataille.id_bataille
GROUP BY nom_bataille
ORDER BY qte DESC 
LIMIT 1;

--  Combien existe-t-il de casques de chaque type et quel est leur coût total ? (classés par nombre décroissant)
SELECT type_casque.nom_type_casque, COUNT(casque.id_type_casque), SUM(casque.cout_casque) AS cout
FROM type_casque
INNER JOIN casque
	ON type_casque.id_type_casque = casque.id_type_casque
GROUP BY type_casque.nom_type_casque
ORDER BY cout DESC;

-- . Nom des potions dont un des ingrédients est le poisson frais.
SELECT potion.nom_potion
FROM composer
INNER JOIN Potion
	ON composer.id_potion = potion.id_potion
INNER JOIN ingredient
	ON composer.id_ingredient = ingredient.id_ingredient
WHERE composer.id_ingredient = 24;

--  Nom du / des lieu(x) possédant le plus d'habitants, en dehors du village gaulois.
SELECT MAX(nom_lieu) AS 'lieu ayant le plus de personnage apres le village gaulois'
FROM personnage
INNER JOIN lieu
	ON personnage.id_lieu  = lieu.id_lieu
WHERE personnage.id_lieu > (lieu.id_lieu = (lieu.nom_lieu = 'Village gaulois'));

-- Nom des personnages qui n''ont jamais bu aucune potion
SELECT nom_personnage
FROM personnage
LEFT JOIN boire 
	ON personnage.id_personnage = boire.id_personnage
WHERE boire.id_personnage IS NULL
ORDER BY nom_personnage;

--  Nom du / des personnages qui n'ont pas le droit de boire de la potion 'Magique'.
SELECT nom_personnage
FROM personnage
LEFT JOIN autoriser_boire
	ON personnage.id_personnage = autoriser_boire.id_personnage
LEFT JOIN potion
	ON autoriser_boire.id_potion = potion.id_potion
WHERE autoriser_boire.id_potion != ( potion.id_potion = (potion.nom_potion = 'Magique'))
GROUP BY nom_personnage
ORDER BY nom_personnage;